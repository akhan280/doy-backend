generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String    @id @default(cuid())
  name     String?
  phone    String    @unique
  paid     Boolean?
  contacts Contact[]
  timeZone String
  stripeId String?
  email    String?
  street   String?
  city     String?
  state    String?
  zipCode  String?

  messagePreferences MessagePreferences?
  conversations      Conversation[]
  orders             Order[]
}

model Contact {
  id             String   @id @default(cuid())
  name           String
  phoneNumber    String?
  birthday       DateTime
  userId         String
  notify         Boolean  @default(false)
  profilePicture Bytes?
  street         String?
  city           String?
  state          String?
  zipCode        String?
  user           User     @relation(fields: [userId], references: [id])
  orders         Order[]
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  contactId       String
  paymentIntentId String?  @unique
  amount          Float?
  currency        String?
  status          String?
  createdAt       DateTime @default(now())
  orderInfo       Json?

  user    User    @relation(fields: [userId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])
}

model MessagePreferences {
  id         Int     @id @default(autoincrement())
  daysAhead0 Boolean @default(false)
  daysAhead1 Boolean @default(false)
  daysAhead2 Boolean @default(false)
  daysAhead3 Boolean @default(false)
  daysAhead7 Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  isUserMessage  Boolean
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  functionCalled String?
  functionResult String?
}
